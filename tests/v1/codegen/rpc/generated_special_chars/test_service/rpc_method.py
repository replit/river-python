# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
import datetime
from typing import (
    Any,
    Literal,
    Mapping,
    NotRequired,
    TypedDict,
)
from typing_extensions import Annotated

from pydantic import BaseModel, Field, TypeAdapter, WrapValidator
from replit_river.error_schema import RiverError
from replit_river.client import (
    RiverUnknownError,
    translate_unknown_error,
    RiverUnknownValue,
    translate_unknown_value,
)

import replit_river as river


def encode_Rpc_MethodInput(
    x: "Rpc_MethodInput",
) -> Any:
    return {
        k: v
        for (k, v) in (
            {
                "data field6": x.get("data_field6"),
                "data-field1": x.get("data_field1"),
                "data.field3": x.get("data_field3"),
                "data/field4": x.get("data_field4"),
                "data:field2": x.get("data_field2"),
                "data@field5": x.get("data_field5"),
            }
        ).items()
        if v is not None
    }


class Rpc_MethodInput(TypedDict):
    data_field6: NotRequired[str | None]
    data_field1: str
    data_field3: NotRequired[bool | None]
    data_field4: NotRequired[str | None]
    data_field2: float
    data_field5: NotRequired[int | None]
