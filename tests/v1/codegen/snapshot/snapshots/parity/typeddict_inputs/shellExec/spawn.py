# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
import datetime
from typing import (
    Any,
    Literal,
    Mapping,
    NotRequired,
    TypedDict,
)
from typing_extensions import Annotated

from pydantic import BaseModel, Field, TypeAdapter, WrapValidator
from replit_river.error_schema import RiverError
from replit_river.client import (
    RiverUnknownError,
    translate_unknown_error,
    RiverUnknownValue,
    translate_unknown_value,
)

import replit_river as river


def encode_SpawnInputSize(
    x: "SpawnInputSize",
) -> Any:
    return {
        k: v
        for (k, v) in (
            {
                "cols": x.get("cols"),
                "rows": x.get("rows"),
            }
        ).items()
        if v is not None
    }


class SpawnInputSize(TypedDict):
    cols: int
    rows: int


def encode_SpawnInput(
    x: "SpawnInput",
) -> Any:
    return {
        k: v
        for (k, v) in (
            {
                "args": x.get("args"),
                "autoCleanup": x.get("autoCleanup"),
                "cmd": x.get("cmd"),
                "cwd": x.get("cwd"),
                "env": x.get("env"),
                "initialCmd": x.get("initialCmd"),
                "interactive": x.get("interactive"),
                "size": encode_SpawnInputSize(x["size"])
                if "size" in x and x["size"] is not None
                else None,
                "useCgroupMagic": x.get("useCgroupMagic"),
                "useReplitRunEnv": x.get("useReplitRunEnv"),
            }
        ).items()
        if v is not None
    }


class SpawnInput(TypedDict):
    args: NotRequired[list[str] | None]
    autoCleanup: NotRequired[bool | None]
    cmd: str
    cwd: NotRequired[str | None]
    env: NotRequired[dict[str, str] | None]
    initialCmd: NotRequired[str | None]
    interactive: NotRequired[bool | None]
    size: NotRequired[SpawnInputSize | None]
    useCgroupMagic: NotRequired[bool | None]
    useReplitRunEnv: NotRequired[bool | None]


class SpawnOutput(BaseModel):
    pass


SpawnOutputTypeAdapter: TypeAdapter[SpawnOutput] = TypeAdapter(SpawnOutput)


class SpawnErrors(RiverError):
    pass


SpawnErrorsTypeAdapter: TypeAdapter[SpawnErrors] = TypeAdapter(SpawnErrors)
