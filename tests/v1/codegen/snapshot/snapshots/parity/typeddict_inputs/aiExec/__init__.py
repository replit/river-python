# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
from typing import Any
import datetime

from pydantic import TypeAdapter

from replit_river.error_schema import RiverError, RiverErrorTypeAdapter
import replit_river as river


from .exec import (
    ExecErrors,
    ExecErrorsTypeAdapter,
    ExecInit,
    ExecInput,
    ExecOutput,
    ExecOutputTypeAdapter,
    encode_ExecInit,
    encode_ExecInput,
)


class AiexecService:
    def __init__(self, client: river.Client[Any]):
        self.client = client

    async def exec(
        self,
        init: ExecInit,
        inputStream: AsyncIterable[ExecInput],
    ) -> AsyncIterator[ExecOutput | ExecErrors | RiverError]:
        return self.client.send_stream(
            "aiExec",
            "exec",
            init,
            inputStream,
            encode_ExecInit,
            encode_ExecInput,
            lambda x: ExecOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: ExecErrorsTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
        )
