# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
from typing import Any
import datetime

from pydantic import TypeAdapter

from replit_river.error_schema import RiverError, RiverErrorTypeAdapter
import replit_river as river


from .persist import (
    PersistErrors,
    PersistErrorsTypeAdapter,
    PersistInput,
    PersistOutput,
    PersistOutputTypeAdapter,
    encode_PersistInput,
)


class ConmanfilesystemService:
    def __init__(self, client: river.Client[Any]):
        self.client = client

    async def persist(
        self,
        input: PersistInput,
        timeout: datetime.timedelta,
    ) -> PersistOutput:
        return await self.client.send_rpc(
            "conmanFilesystem",
            "persist",
            input,
            encode_PersistInput,
            lambda x: PersistOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: PersistErrorsTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            timeout,
        )
