# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
from typing import Any
import datetime

from pydantic import TypeAdapter

from replit_river.error_schema import RiverError, RiverErrorTypeAdapter
import replit_river as river


from .stream_method import (
    Stream_MethodInit,
    Stream_MethodInput,
    Stream_MethodOutput,
    Stream_MethodOutputTypeAdapter,
    encode_Stream_MethodInit,
    encode_Stream_MethodInput,
)


class Test_ServiceService:
    def __init__(self, client: river.v2.Client[Any]):
        self.client = client

    async def stream_method(
        self,
        init: Stream_MethodInit,
        inputStream: AsyncIterable[Stream_MethodInput],
    ) -> AsyncIterator[Stream_MethodOutput | RiverError | RiverError]:
        return self.client.send_stream(
            "test_service",
            "stream_method",
            init,
            inputStream,
            encode_Stream_MethodInit,
            encode_Stream_MethodInput,
            lambda x: Stream_MethodOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: RiverErrorTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
        )
