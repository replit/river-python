# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
from typing import Any
import datetime

from pydantic import TypeAdapter

from replit_river.error_schema import RiverError, RiverErrorTypeAdapter
import replit_river as river


from .rpc_method import (
    Rpc_MethodInit,
    Rpc_MethodOutput,
    Rpc_MethodOutputTypeAdapter,
    encode_Rpc_MethodInit,
)


class Test_ServiceService:
    def __init__(self, client: river.v2.Client[Any]):
        self.client = client

    async def rpc_method(
        self,
        init: Rpc_MethodInit,
        timeout: datetime.timedelta,
    ) -> Rpc_MethodOutput:
        return await self.client.send_rpc(
            "test_service",
            "rpc_method",
            init,
            encode_Rpc_MethodInit,
            lambda x: Rpc_MethodOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: RiverErrorTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            timeout,
        )
