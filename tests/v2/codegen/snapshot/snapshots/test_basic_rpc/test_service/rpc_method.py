# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
import datetime
from typing import (
    Any,
    Literal,
    Mapping,
    NotRequired,
    TypedDict,
)
from typing_extensions import Annotated

from pydantic import BaseModel, Field, TypeAdapter, WrapValidator
from replit_river.error_schema import RiverError
from replit_river.client import (
    RiverUnknownError,
    translate_unknown_error,
    RiverUnknownValue,
    translate_unknown_value,
)

import replit_river as river


def encode_Rpc_MethodInit(
    x: "Rpc_MethodInit",
) -> Any:
    return {
        k: v
        for (k, v) in (
            {
                "data": x.get("data"),
            }
        ).items()
        if v is not None
    }


class Rpc_MethodInit(TypedDict):
    data: str


class Rpc_MethodOutput(BaseModel):
    data: str


Rpc_MethodOutputTypeAdapter: TypeAdapter[Rpc_MethodOutput] = TypeAdapter(
    Rpc_MethodOutput
)
