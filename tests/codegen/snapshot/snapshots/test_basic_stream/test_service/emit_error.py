# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
import datetime
from typing import (
    Any,
    Literal,
    Mapping,
    NotRequired,
    TypedDict,
)
from typing_extensions import Annotated

from pydantic import BaseModel, Field, TypeAdapter, WrapValidator
from replit_river.error_schema import RiverError
from replit_river.client import (
    RiverUnknownError,
    translate_unknown_error,
    RiverUnknownValue,
    translate_unknown_value,
)

import replit_river as river


class Emit_ErrorErrorsOneOf_DATA_LOSS(RiverError):
    code: Literal["DATA_LOSS"]
    message: str


class Emit_ErrorErrorsOneOf_UNEXPECTED_DISCONNECT(RiverError):
    code: Literal["UNEXPECTED_DISCONNECT"]
    message: str


Emit_ErrorErrors = Annotated[
    Emit_ErrorErrorsOneOf_DATA_LOSS
    | Emit_ErrorErrorsOneOf_UNEXPECTED_DISCONNECT
    | RiverUnknownError,
    WrapValidator(translate_unknown_error),
]


Emit_ErrorErrorsTypeAdapter: TypeAdapter[Emit_ErrorErrors] = TypeAdapter(
    Emit_ErrorErrors
)
