# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
import datetime
from typing import (
    Any,
    Literal,
    Mapping,
    NotRequired,
    TypedDict,
)
from typing_extensions import Annotated

from pydantic import BaseModel, Field, TypeAdapter, WrapValidator
from replit_river.error_schema import RiverError
from replit_river.client import RiverUnknownValue, translate_unknown_value

import replit_river as river


NeedsenumInput = Literal["in_first", "in_second"]


def encode_NeedsenumInput(x: "NeedsenumInput") -> Any:
    return x


NeedsenumInputTypeAdapter: TypeAdapter[Any] = TypeAdapter(NeedsenumInput)

NeedsenumOutput = Annotated[
    Literal["out_first", "out_second"] | RiverUnknownValue,
    WrapValidator(translate_unknown_value),
]

NeedsenumOutputTypeAdapter: TypeAdapter[Any] = TypeAdapter(NeedsenumOutput)

NeedsenumErrors = Annotated[
    Literal["err_first", "err_second"] | RiverUnknownValue,
    WrapValidator(translate_unknown_value),
]

NeedsenumErrorsTypeAdapter: TypeAdapter[Any] = TypeAdapter(NeedsenumErrors)
