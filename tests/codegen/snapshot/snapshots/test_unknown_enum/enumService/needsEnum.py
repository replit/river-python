# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
import datetime
from typing import (
    Any,
    Literal,
    Mapping,
    NotRequired,
    TypedDict,
)
from typing_extensions import Annotated

from pydantic import BaseModel, Field, TypeAdapter, WrapValidator
from replit_river.error_schema import RiverError
from replit_river.client import (
    RiverUnknownError,
    translate_unknown_error,
    RiverUnknownValue,
    translate_unknown_value,
)

import replit_river as river


NeedsenumInput = Literal["in_first", "in_second"]


def encode_NeedsenumInput(x: "NeedsenumInput") -> Any:
    return x


NeedsenumInputTypeAdapter: TypeAdapter[NeedsenumInput] = TypeAdapter(NeedsenumInput)

NeedsenumOutput = Annotated[
    Literal["out_first", "out_second"] | RiverUnknownValue,
    WrapValidator(translate_unknown_value),
]

NeedsenumOutputTypeAdapter: TypeAdapter[NeedsenumOutput] = TypeAdapter(NeedsenumOutput)


class NeedsenumErrorsOneOf_err_first(RiverError):
    code: Literal["err_first"]
    message: str


class NeedsenumErrorsOneOf_err_second(RiverError):
    code: Literal["err_second"]
    message: str


NeedsenumErrors = Annotated[
    NeedsenumErrorsOneOf_err_first
    | NeedsenumErrorsOneOf_err_second
    | RiverUnknownError,
    WrapValidator(translate_unknown_error),
]


NeedsenumErrorsTypeAdapter: TypeAdapter[NeedsenumErrors] = TypeAdapter(NeedsenumErrors)
