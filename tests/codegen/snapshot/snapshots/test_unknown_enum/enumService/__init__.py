# Code generated by river.codegen. DO NOT EDIT.
from collections.abc import AsyncIterable, AsyncIterator
from typing import Any
import datetime

from pydantic import TypeAdapter

from replit_river.error_schema import RiverError, RiverErrorTypeAdapter
import replit_river as river


from .needsEnum import (
    NeedsenumErrors,
    NeedsenumErrorsTypeAdapter,
    NeedsenumInput,
    NeedsenumInputTypeAdapter,
    NeedsenumOutput,
    NeedsenumOutputTypeAdapter,
    encode_NeedsenumInput,
)
from .needsEnumObject import (
    NeedsenumobjectErrors,
    NeedsenumobjectErrorsTypeAdapter,
    NeedsenumobjectInput,
    NeedsenumobjectInputTypeAdapter,
    NeedsenumobjectOutput,
    NeedsenumobjectOutputTypeAdapter,
    encode_NeedsenumobjectInput,
)


class EnumserviceService:
    def __init__(self, client: river.Client[Any]):
        self.client = client

    async def needsEnum(
        self,
        input: NeedsenumInput,
        timeout: datetime.timedelta,
    ) -> NeedsenumOutput:
        return await self.client.send_rpc(
            "enumService",
            "needsEnum",
            input,
            lambda x: x,
            lambda x: NeedsenumOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: NeedsenumErrorsTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            timeout,
        )

    async def needsEnumObject(
        self,
        input: NeedsenumobjectInput,
        timeout: datetime.timedelta,
    ) -> NeedsenumobjectOutput:
        return await self.client.send_rpc(
            "enumService",
            "needsEnumObject",
            input,
            encode_NeedsenumobjectInput,
            lambda x: NeedsenumobjectOutputTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            lambda x: NeedsenumobjectErrorsTypeAdapter.validate_python(
                x  # type: ignore[arg-type]
            ),
            timeout,
        )
